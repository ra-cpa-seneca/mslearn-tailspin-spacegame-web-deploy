trigger:
- "*"

variables:
  buildConfiguration: "Release"
  releaseBranchName: "release"
  dotnetSdkVersion: "8.x"
  wwwrootDir: "Tailspin.SpaceGame.Web/wwwroot"

stages:
- stage: Build
  displayName: "Build the web application"
  jobs:
  - job: Build
    displayName: "Build job"
    pool:
      name: "SecureAgents-aoude"    # <-- your Managed DevOps Pool
      demands:
      - npm                         # keep this so the job waits for an image with npm

    steps:
    - checkout: self

    # Pin a Node version that works well with node-sass
    - task: NodeTool@0
      displayName: "Use Node.js 18.x"
      inputs:
        versionSpec: "18.x"

    # .NET SDK
    - task: UseDotNet@2
      displayName: "Use .NET SDK $(dotnetSdkVersion)"
      inputs:
        version: "$(dotnetSdkVersion)"

    # Ensure gulp-cli is available
    - script: npm install -g gulp-cli
      displayName: "Install gulp-cli"

    - task: Npm@1
      displayName: "Run npm install"
      inputs:
        verbose: false

    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: "Compile Sass assets"

    - task: gulp@1
      displayName: "Run gulp tasks"

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: "Write build info"
      workingDirectory: "$(wwwrootDir)"

    - task: DotNetCoreCLI@2
      displayName: "Restore project dependencies"
      inputs:
        command: "restore"
        projects: "**/*.csproj"

    - task: DotNetCoreCLI@2
      displayName: "Build the project - $(buildConfiguration)"
      inputs:
        command: "build"
        arguments: "--no-restore --configuration $(buildConfiguration)"
        projects: "**/*.csproj"

    - task: DotNetCoreCLI@2
      displayName: "Publish the project - $(buildConfiguration)"
      inputs:
        command: "publish"
        projects: "**/*.csproj"
        publishWebProjects: false
        arguments: "--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)"
        zipAfterPublish: true

    - publish: "$(Build.ArtifactStagingDirectory)"
      artifact: drop
