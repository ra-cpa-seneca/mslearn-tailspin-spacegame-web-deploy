jobs:
- job: 'Build'
  displayName: 'Build job'
  pool:
    name: 'SelfHosted-SecureAgents'
    demands:
    - npm

  # optional but helpful for your low-disk warning
  workspace:
    clean: all

  steps:
  - task: NodeTool@0
    displayName: 'Use Node 16.x'
    inputs:
      versionSpec: '16.x'

  - task: UseDotNet@2
    displayName: 'Use .NET SDK $(dotnetSdkVersion)'
    inputs:
      version: '$(dotnetSdkVersion)'

  - task: Npm@1
    displayName: 'npm install (web)'
    inputs:
      command: 'install'
      workingDir: '$(webProjectDir)'
    env:
      PYTHON: 'C:\Program Files\Python312\python.exe'
      GYP_MSVS_VERSION: '2022'
      npm_config_msvs_version: '2022'

  # Ensure gulp-cli (and gulp if needed) exists locally
  - task: Npm@1
    displayName: 'npm i gulp-cli (local)'
    inputs:
      command: 'custom'
      workingDir: '$(webProjectDir)'
      customCommand: 'install gulp-cli --save-dev'
    # If your package.json already has "gulp" in devDependencies, keep only gulp-cli.
    # If it doesn't, use: customCommand: 'install gulp gulp-cli --save-dev'

  - task: CmdLine@2
    displayName: 'npm rebuild node-sass'
    inputs:
      script: 'npm rebuild node-sass'
      workingDirectory: '$(webProjectDir)'
    env:
      PYTHON: 'C:\Program Files\Python312\python.exe'
      GYP_MSVS_VERSION: '2022'
      npm_config_msvs_version: '2022'

  - task: CmdLine@2
    displayName: 'Compile Sass assets'
    inputs:
      script: 'npx node-sass $(wwwrootDir) --output $(wwwrootDir)'
      workingDirectory: '$(webProjectDir)'

  # ⬇️ Replace the gulp@1 task with npx gulp
  - task: CmdLine@2
    displayName: 'Run gulp tasks'
    inputs:
      script: 'npx gulp'
      workingDirectory: '$(webProjectDir)'

  - task: CmdLine@2
    displayName: 'Write build info'
    inputs:
      script: 'echo $(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber) > buildinfo.txt'
      workingDirectory: '$(webProjectDir)/wwwroot'

  - task: DotNetCoreCLI@2
    displayName: 'Restore project dependencies'
    inputs:
      command: 'restore'
      projects: '**/*.csproj'

  - task: DotNetCoreCLI@2
    displayName: 'Build the project - $(buildConfiguration)'
    inputs:
      command: 'build'
      arguments: '--no-restore --configuration $(buildConfiguration)'
      projects: '**/*.csproj'

  - task: DotNetCoreCLI@2
    displayName: 'Publish the project - $(buildConfiguration)'
    inputs:
      command: 'publish'
      projects: '**/*.csproj'
      publishWebProjects: false
      arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
      zipAfterPublish: true

  - publish: '$(Build.ArtifactStagingDirectory)'
    artifact: drop
