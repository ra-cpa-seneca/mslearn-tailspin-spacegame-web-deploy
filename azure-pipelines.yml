trigger:
- '*'


variables:
  buildConfiguration: 'Release'
  releaseBranchName: 'release'
  webProjectDir: '$(Build.SourcesDirectory)/Tailspin.SpaceGame.Web'
  wwwrootDir: 'wwwroot'   
  dotnetSdkVersion: '8.x'




stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs:
  - job: 'Build'
    displayName: 'Build job'
    pool:
      name: 'SelfHosted-SecureAgents'   # run on self-hosted VM agent
      demands:
      - npm


    steps:

    - task: NodeTool@0
      displayName: 'Use Node 16.x'
      inputs:
        versionSpec: '16.x'



    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'



    - task: Npm@1
      displayName: 'npm install (web)'
      inputs:
        command: 'install'
        workingDir: '$(webProjectDir)'
      env:
        PYTHON: 'C:\Program Files\Python312\python.exe'
        GYP_MSVS_VERSION: '2022'
        npm_config_msvs_version: '2022'



    - task: CmdLine@2
      displayName: 'npm rebuild node-sass'
      inputs:
        script: 'npm rebuild node-sass'
        workingDirectory: '$(webProjectDir)'
      env:
        PYTHON: 'C:\Program Files\Python312\python.exe'
        GYP_MSVS_VERSION: '2022'
        npm_config_msvs_version: '2022'



    - task: CmdLine@2
      displayName: 'Compile Sass assets'
      inputs:
        script: 'npx node-sass $(wwwrootDir) --output $(wwwrootDir)'
        workingDirectory: '$(webProjectDir)'


    - task: Npm@1
      displayName: 'Install gulp-cli globally'
      inputs:
        command: 'custom'
        customCommand: 'install -g gulp-cli gulp gulp-concat gulp-clean-css gulp-uglify rimraf'

 
    - task: gulp@1
      displayName: 'Run gulp tasks'
      inputs:
        workingDirectory: '$(webProjectDir)'



    - task: CmdLine@2
      displayName: 'Write build info'
      inputs:
        script: 'echo $(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber) > buildinfo.txt'
        workingDirectory: '$(webProjectDir)/wwwroot'



    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'


    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'


    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true


    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

- stage: 'AKS'
  displayName: 'Deploy to AKS'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployToAKS
    displayName: 'Deploy manifests to AKS'
    pool:
      name: 'SelfHosted-SecureAgents'
    environment: 'aks'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          - task: KubernetesManifest@1
            displayName: 'Deploy Kubernetes manifests'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'sc-k8s-aks-secureapp'
              namespace: 'default'
              manifests: |
                manifests/deployment.yaml
                manifests/service.yaml
