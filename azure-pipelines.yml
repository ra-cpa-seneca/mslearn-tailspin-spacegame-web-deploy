trigger:
- '*'

variables:
  buildConfiguration: 'Release'
  releaseBranchName: 'release'
  webProjectDir: '$(Build.SourcesDirectory)/Tailspin.SpaceGame.Web'
  wwwrootDir: 'wwwroot'          # folder inside Tailspin.SpaceGame.Web
  dotnetSdkVersion: '8.x'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs:
  - job: 'Build'
    displayName: 'Build job'
    pool:
      name: 'SelfHosted-SecureAgents'   # run on self-hosted VM agent
      demands:
      - npm

    steps:
    # 1) Use a modern Node (Dart Sass is pure JS; no node-gyp needed)
    - task: NodeTool@0
      displayName: 'Use Node 18.x'
      inputs:
        versionSpec: '18.x'

    # 2) .NET SDK
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    # 3) npm install app deps
    - task: Npm@1
      displayName: 'npm install (web)'
      inputs:
        command: 'install'
        workingDir: '$(webProjectDir)'

    # 4) Ensure build-time tools exist (safe if already in devDependencies)
    - task: Npm@1
      displayName: 'npm install -D sass gulp gulp-cli (ensure)'
      inputs:
        command: 'custom'
        workingDir: '$(webProjectDir)'
        customCommand: 'npm install --no-audit --no-fund --save-dev sass gulp gulp-cli'

    # 5) Compile Sass â†’ CSS with Dart Sass (no native bindings)
    - task: CmdLine@2
      displayName: 'Compile Sass assets'
      inputs:
        script: 'npx sass $(wwwrootDir):$(wwwrootDir) --no-source-map'
        workingDirectory: '$(webProjectDir)'

    # 6) Run gulp tasks (from local node_modules)
    - task: CmdLine@2
      displayName: 'Run gulp tasks'
      inputs:
        script: 'npx gulp'
        workingDirectory: '$(webProjectDir)'

    # 7) Write build metadata
    - task: CmdLine@2
      displayName: 'Write build info'
      inputs:
        script: 'echo $(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber) > buildinfo.txt'
        workingDirectory: '$(webProjectDir)/wwwroot'

    # 8) .NET restore / build / publish
    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop
