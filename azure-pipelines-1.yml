trigger:
- '*'

variables:
  buildConfiguration: 'Release'
  releaseBranchName: 'release'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      name: 'SecureAgents-aoude'   # ‚úÖ Managed DevOps Pool name

    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '8.x'

    steps:
    # 1Ô∏è‚É£ Use .NET SDK
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    # 2Ô∏è‚É£ Set up a safe working directory (prevents /mnt/vss access issues)
    - script: |
        echo "Creating safe working directory..."
        mkdir -p "$(Pipeline.Workspace)/src"
        cp -r . "$(Pipeline.Workspace)/src"
        echo "Now working inside: $(Pipeline.Workspace)/src"
        ls -la "$(Pipeline.Workspace)/src"
      displayName: 'Prepare safe working directory'

    # 3Ô∏è‚É£ Run npm install inside safe workspace
    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        workingDir: '$(Pipeline.Workspace)/src/Tailspin.SpaceGame.Web'
        verbose: false

    # 4Ô∏è‚É£ Compile Sass assets
    - script: |
        ./node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)
      displayName: 'Compile Sass assets'
      workingDirectory: '$(Pipeline.Workspace)/src'

    # 5Ô∏è‚É£ Run Gulp
    - task: Gulp@1
      displayName: 'Run gulp tasks'
      inputs:
        gulpFile: '$(Pipeline.Workspace)/src/gulpfile.js'

    # 6Ô∏è‚É£ Write build info
    - script: |
        echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt
      displayName: 'Write build info'
      workingDirectory: '$(Pipeline.Workspace)/src/$(wwwrootDir)'

    # 7Ô∏è‚É£ Restore dependencies
    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '$(Pipeline.Workspace)/src/**/*.csproj'

    # 8Ô∏è‚É£ Build project
    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '$(Pipeline.Workspace)/src/**/*.csproj'

    # 9Ô∏è‚É£ Publish project safely into writable artifact dir
    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '$(Pipeline.Workspace)/src/**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    # üîü Publish artifacts
    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop
